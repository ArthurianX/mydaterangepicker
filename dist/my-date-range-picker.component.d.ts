import { EventEmitter, OnChanges, SimpleChanges, ElementRef } from '@angular/core';
import { IMyDate, IMyMonth, IMyDayLabels, IMyMonthLabels } from './interfaces/index';
import { DateRangeValidatorService } from './services/my-date-range-picker.date.range.validator.service';
export declare class MyDateRangePicker implements OnChanges {
    elem: ElementRef;
    private dateValidatorRangeService;
    options: any;
    selDateRange: string;
    dateRangeChanged: EventEmitter<Object>;
    showSelector: boolean;
    visibleMonth: IMyMonth;
    weekDays: Array<string>;
    dates: Array<Object>;
    selectionDayTxt: string;
    invalidDateRange: boolean;
    dateRangeFormat: string;
    dayIdx: number;
    today: Date;
    PREV_MONTH: number;
    CURR_MONTH: number;
    NEXT_MONTH: number;
    isBeginDate: boolean;
    beginDate: IMyDate;
    endDate: IMyDate;
    disableUntil: IMyDate;
    disableSince: IMyDate;
    dayLabels: IMyDayLabels;
    monthLabels: IMyMonthLabels;
    dateFormat: string;
    clearBtnTxt: string;
    beginDateBtnTxt: string;
    endDateBtnTxt: string;
    acceptBtnTxt: string;
    selectBeginDateTxt: string;
    selectEndDateTxt: string;
    firstDayOfWeek: string;
    sunHighlight: boolean;
    height: string;
    width: string;
    inline: boolean;
    selectionTxtFontSize: string;
    alignSelectorRight: boolean;
    indicateInvalidDateRange: boolean;
    showDateRangeFormatPlaceholder: boolean;
    constructor(elem: ElementRef, dateValidatorRangeService: DateRangeValidatorService);
    setOptions(): void;
    userDateRangeInput(event: any): void;
    parseOptions(): void;
    ngOnChanges(changes: SimpleChanges): void;
    removeBtnClicked(): void;
    openBtnClicked(): void;
    prevMonth(): void;
    nextMonth(): void;
    prevYear(): void;
    nextYear(): void;
    clearBtnClicked(): void;
    cellClicked(cell: any): void;
    toEndDate(): void;
    toBeginDate(): void;
    rangeSelected(): void;
    isInRange(val: any): boolean;
    isRangeSelected(): boolean;
    preZero(val: string): string;
    formatDate(val: any): string;
    monthText(m: number): string;
    monthStartIdx(y: number, m: number): number;
    daysInMonth(m: number, y: number): number;
    daysInPrevMonth(m: number, y: number): number;
    isCurrDay(d: number, m: number, y: number, cmo: any): boolean;
    isDisabledDay(date: IMyDate): boolean;
    getPreviousDate(date: IMyDate): IMyDate;
    getNextDate(date: IMyDate): IMyDate;
    getTimeInMilliseconds(date: IMyDate): number;
    getDayNumber(date: IMyDate): number;
    sundayIdx(): number;
    generateCalendar(m: number, y: number): void;
    parseDate(ds: string): IMyDate;
}
